<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_bounded_vector_8cpp" kind="file" language="C++">
    <compoundname>BoundedVector.cpp</compoundname>
    <includes refid="_bounded_vector_8hpp" local="yes">BoundedVector.hpp</includes>
    <includes local="no">cmath</includes>
    <includes local="no">sstream</includes>
    <includes refid="_math_utils_8hpp" local="yes">MathUtils.hpp</includes>
    <incdepgraph>
      <node id="173">
        <label>cmath</label>
      </node>
      <node id="170">
        <label>string</label>
      </node>
      <node id="172">
        <label>wx/gdicmn.h</label>
      </node>
      <node id="169">
        <label>Config.hpp</label>
        <link refid="_config_8hpp_source"/>
      </node>
      <node id="174">
        <label>sstream</label>
      </node>
      <node id="171">
        <label>Point.hpp</label>
        <link refid="_point_8hpp_source"/>
        <childnode refid="172" relation="include">
        </childnode>
      </node>
      <node id="168">
        <label>BoundedVector.hpp</label>
        <link refid="_bounded_vector_8hpp_source"/>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
      </node>
      <node id="175">
        <label>MathUtils.hpp</label>
        <link refid="_math_utils_8hpp_source"/>
        <childnode refid="169" relation="include">
        </childnode>
      </node>
      <node id="167">
        <label>/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp</label>
        <link refid="BoundedVector.cpp"/>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_model">model</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="_bounded_vector_8cpp_1a047f01d1a39fd1eb111624bb6ecffed6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref></type>
        <definition>model::BoundedVector operator+</definition>
        <argsstring>(const model::BoundedVector &amp;lhs, const model::BoundedVector &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp" line="119" column="1" bodyfile="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="_bounded_vector_8cpp_1a6a521c20fb110c91538d6a0726125b6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref></type>
        <definition>model::BoundedVector operator-</definition>
        <argsstring>(const model::BoundedVector &amp;lhs, const model::BoundedVector &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp" line="127" column="1" bodyfile="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp" bodystart="127" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="_bounded_vector_8cpp_1a358612355ba2ae87e7dac54385aff2d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float operator*</definition>
        <argsstring>(const model::BoundedVector &amp;lhs, const model::BoundedVector &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp" line="135" column="1" bodyfile="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp" bodystart="135" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="_bounded_vector_8cpp_1a6802b54891c6cfbb892f2dbd3779b19f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref></type>
        <definition>model::BoundedVector operator*</definition>
        <argsstring>(float s, const model::BoundedVector &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp" line="143" column="1" bodyfile="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp" bodystart="143" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="_bounded_vector_8cpp_1aa236edefe243fb99f206fd931815a77e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref></type>
        <definition>model::BoundedVector operator*</definition>
        <argsstring>(const model::BoundedVector &amp;lhs, float s)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp" line="151" column="1" bodyfile="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp" bodystart="151" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="_bounded_vector_8cpp_1ae465adab3a75784ec04a4c8d822dd4af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref></type>
        <definition>model::BoundedVector operator/</definition>
        <argsstring>(const model::BoundedVector &amp;lhs, float s)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp" line="159" column="1" bodyfile="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp" bodystart="159" bodyend="163"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;BoundedVector.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MathUtils.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_model" kindref="compound">model</ref></highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>BoundedVector::getMagnitude()</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(<sp/>x<sp/>*<sp/>x<sp/>+<sp/>y<sp/>*<sp/>y);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BoundedVector::normalise()</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>magnitude<sp/>=<sp/>getMagnitude();</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(magnitude<sp/>&lt;=<sp/>Utils::ALMOST_ZERO)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>magnitude<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>/=<sp/>magnitude;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>/=<sp/>magnitude;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::fabs(<sp/>x)<sp/>&lt;<sp/>Utils::ALMOST_ZERO)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::fabs(<sp/>y)<sp/>&lt;<sp/>Utils::ALMOST_ZERO)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>BoundedVector<sp/>BoundedVector::getNormalised()</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BoundedVector<sp/>polarCoord(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarCoord.normalise();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>polarCoord;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BoundedVector::reverse()</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>-x;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>-y;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>BoundedVector&amp;<sp/>BoundedVector::operator+=(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BoundedVector&amp;<sp/>aVector)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>aVector.x;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>aVector.y;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>BoundedVector&amp;<sp/>BoundedVector::operator-=(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BoundedVector&amp;<sp/>aVector)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>aVector.x;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>-=<sp/>aVector.y;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>BoundedVector&amp;<sp/>BoundedVector::operator*=(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aScalar)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>*=<sp/>aScalar;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>*=<sp/>aScalar;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>BoundedVector&amp;<sp/>BoundedVector::operator/=(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aScalar)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>/=<sp/>aScalar;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>/=<sp/>aScalar;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>BoundedVector<sp/>BoundedVector::operator-()</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BoundedVector(<sp/>-x,<sp/>-y);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_model_1_1_bounded_vector_1a5a0115cf9e87c118474d507efcbaddfb" kindref="member">BoundedVector::asString</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="101"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>os;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_model_1_1_bounded_vector_1aa04899e137a269e9ab116535c4fadc07" kindref="member">BoundedVector::asDebugString</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="112"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector_1a5a0115cf9e87c118474d507efcbaddfb" kindref="member">asString</ref>();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>model</highlight></codeline>
<codeline lineno="119"><highlight class="comment"></highlight><highlight class="normal"><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref><sp/>operator+(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>(<sp/>lhs.x<sp/>+<sp/>rhs.x,<sp/>lhs.y<sp/>+<sp/>rhs.y);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref><sp/>operator-(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>(<sp/>lhs.x<sp/>-<sp/>rhs.x,<sp/>lhs.y<sp/>-<sp/>rhs.y);</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>operator*(<sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lhs.x<sp/>*<sp/>rhs.x)<sp/>+<sp/>(lhs.y<sp/>*<sp/>rhs.y);</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref><sp/>operator*(<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs<sp/>*<sp/>s;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref><sp/>operator*(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s)</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>(<sp/>lhs.x<sp/>*<sp/>s,<sp/>lhs.y<sp/>*<sp/>s);</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref><sp/>operator/(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s)</highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>(<sp/>lhs.x<sp/>/<sp/>s,<sp/>lhs.y<sp/>/<sp/>s);</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp"/>
  </compounddef>
</doxygen>
