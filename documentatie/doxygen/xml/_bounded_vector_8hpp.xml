<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_bounded_vector_8hpp" kind="file" language="C++">
    <compoundname>BoundedVector.hpp</compoundname>
    <includes refid="_config_8hpp" local="yes">Config.hpp</includes>
    <includes local="no">string</includes>
    <includes refid="_point_8hpp" local="yes">Point.hpp</includes>
    <includedby refid="_bounded_vector_8cpp" local="yes">/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp</includedby>
    <includedby refid="_shape2_d_utils_8hpp" local="yes">/home/hqnders/Documents/han/osm/software/robotworld/src/Shape2DUtils.hpp</includedby>
    <includedby refid="_robot_8hpp" local="yes">/home/hqnders/Documents/han/osm/software/robotworld/src/Robot.hpp</includedby>
    <incdepgraph>
      <node id="179">
        <label>string</label>
      </node>
      <node id="181">
        <label>wx/gdicmn.h</label>
      </node>
      <node id="178">
        <label>Config.hpp</label>
        <link refid="_config_8hpp_source"/>
      </node>
      <node id="180">
        <label>Point.hpp</label>
        <link refid="_point_8hpp_source"/>
        <childnode refid="181" relation="include">
        </childnode>
      </node>
      <node id="177">
        <label>/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.hpp</label>
        <link refid="BoundedVector.hpp"/>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="183">
        <label>/home/hqnders/Documents/han/osm/software/robotworld/src/Shape2DUtils.hpp</label>
        <link refid="_shape2_d_utils_8hpp_source"/>
      </node>
      <node id="184">
        <label>/home/hqnders/Documents/han/osm/software/robotworld/src/Robot.hpp</label>
        <link refid="_robot_8hpp_source"/>
        <childnode refid="185" relation="include">
        </childnode>
      </node>
      <node id="182">
        <label>/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.hpp</label>
        <link refid="BoundedVector.hpp"/>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="184" relation="include">
        </childnode>
      </node>
      <node id="185">
        <label>/home/hqnders/Documents/han/osm/software/robotworld/src/RobotShape.hpp</label>
        <link refid="_robot_shape_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_model_1_1_bounded_vector" prot="public">model::BoundedVector</innerclass>
    <innernamespace refid="namespace_model">model</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="_bounded_vector_8hpp_1a047f01d1a39fd1eb111624bb6ecffed6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref></type>
        <definition>model::BoundedVector operator+</definition>
        <argsstring>(const model::BoundedVector &amp;lhs, const model::BoundedVector &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.hpp" line="117" column="1" bodyfile="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="_bounded_vector_8hpp_1a6a521c20fb110c91538d6a0726125b6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref></type>
        <definition>model::BoundedVector operator-</definition>
        <argsstring>(const model::BoundedVector &amp;lhs, const model::BoundedVector &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.hpp" line="119" column="1" bodyfile="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp" bodystart="127" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="_bounded_vector_8hpp_1a358612355ba2ae87e7dac54385aff2d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float operator*</definition>
        <argsstring>(const model::BoundedVector &amp;lhs, const model::BoundedVector &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.hpp" line="121" column="1" bodyfile="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp" bodystart="135" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="_bounded_vector_8hpp_1a6802b54891c6cfbb892f2dbd3779b19f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref></type>
        <definition>model::BoundedVector operator*</definition>
        <argsstring>(float s, const model::BoundedVector &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.hpp" line="124" column="1" bodyfile="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp" bodystart="143" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="_bounded_vector_8hpp_1aa236edefe243fb99f206fd931815a77e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref></type>
        <definition>model::BoundedVector operator*</definition>
        <argsstring>(const model::BoundedVector &amp;lhs, float s)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.hpp" line="126" column="1" bodyfile="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp" bodystart="151" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="_bounded_vector_8hpp_1ae465adab3a75784ec04a4c8d822dd4af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref></type>
        <definition>model::BoundedVector operator/</definition>
        <argsstring>(const model::BoundedVector &amp;lhs, float s)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.hpp" line="129" column="1" bodyfile="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.cpp" bodystart="159" bodyend="163"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>BOUNDEDVECTOR_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOUNDEDVECTOR_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Config.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Point.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_model" kindref="compound">model</ref></highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15" refid="class_model_1_1_bounded_vector" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_model_1_1_bounded_vector" kindref="compound">BoundedVector</ref></highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">BoundedVector</ref>()<sp/>:</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x(<sp/>0.0),</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y(<sp/>0.0)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">BoundedVector</ref>(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>anX,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>anY)<sp/>:</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x(<sp/>anX),</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y(<sp/>anY)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">BoundedVector</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;<sp/>aPoint1,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Point&amp;<sp/>aPoint2)<sp/>:</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x(<sp/>aPoint1.x<sp/>-<sp/>aPoint2.x),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y(<sp/>aPoint1.y<sp/>-<sp/>aPoint2.y)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">BoundedVector</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">BoundedVector</ref>&amp;<sp/>aPolarCoord)<sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x(<sp/>aPolarCoord.x),</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y(<sp/>aPolarCoord.y)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="class_model_1_1_bounded_vector" kindref="compound">BoundedVector</ref>()</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>getMagnitude();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>normalise();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">BoundedVector</ref><sp/>getNormalised();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reverse();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">BoundedVector</ref>&amp;<sp/>operator+=(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">BoundedVector</ref>&amp;<sp/>aVector);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">BoundedVector</ref>&amp;<sp/>operator-=(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">BoundedVector</ref>&amp;<sp/>aVector);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">BoundedVector</ref>&amp;<sp/>operator*=(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aScalar);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">BoundedVector</ref>&amp;<sp/>operator/=(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aScalar);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">BoundedVector</ref><sp/>operator-();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="class_model_1_1_bounded_vector_1a5a0115cf9e87c118474d507efcbaddfb" kindref="member">asString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="class_model_1_1_bounded_vector_1aa04899e137a269e9ab116535c4fadc07" kindref="member">asDebugString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>for<sp/>accessors<sp/>and<sp/>mutators?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>PolarCoord</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">}<sp/></highlight><highlight class="comment">//namespace<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>global<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref><sp/>operator+(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref><sp/>operator-(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>operator*(<sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref><sp/>operator*(<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref><sp/>operator*(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref><sp/>operator/(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_model_1_1_bounded_vector" kindref="compound">model::BoundedVector</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>BOUNDEDVECTOR_HPP_</highlight></codeline>
    </programlisting>
    <location file="/home/hqnders/Documents/han/osm/software/robotworld/src/BoundedVector.hpp"/>
  </compounddef>
</doxygen>
